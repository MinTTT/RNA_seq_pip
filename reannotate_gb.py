"""
Custom-made code `reannotte_bg.py` was used to caompare and modify the annotations in the gb file generated by prokka.
@author: CHU Pan
@mail: pan_chu@outlook.com

"""

#%%
from Bio import SeqIO
from Bio.Seq import Seq
import typing
import types
# from Bio import Align
from Bio.Blast.Applications import NcbiblastnCommandline
from io import StringIO 
from Bio.Blast import NCBIXML
from Bio.SeqRecord import SeqRecord
from Bio.SeqFeature import SeqFeature, FeatureLocation
#%%
gbRef = r'/root/RNA_seq_pip/annotation_file/GCF_000005845.2_ASM584v2_genomic.gbff'

gbTarget = r'/root/RNA_seq_pip/annotation_file/NCM3722_fulab_01/NCM3722.001.gbk'

genomeRef = SeqIO.parse(gbRef, 'genbank')
genomeTarget = SeqIO.parse(gbTarget, 'genbank')


genomeTarget = [fet for fet in genomeTarget][0]
genomeRef = [fet for fet in genomeRef][0]


#%%
'''
Ref:
{'gene': ['thrL'],
 'locus_tag': ['b0001'],
 'gene_synonym': ['ECK0001'],
 'codon_start': ['1'],
 'transl_table': ['11'],
 'product': ['thr operon leader peptide'],
 'protein_id': ['NP_414542.1'],
 'db_xref': ['UniProtKB/Swiss-Prot:P0AD86',
  'ASAP:ABE-0000006',
  'ECOCYC:EG11277',
  'GeneID:944742'],
 'translation': ['MKRISTTITTTITITTGNGAG']}
 
 Target:
 {'gene': ['aas'],
 'locus_tag': ['b_02884'],
 'EC_number': ['2.3.1.40'],
 'inference': ['ab initio prediction:Prodigal:002006',
  'similar to AA sequence:GCF_000005845.2_ASM584v2_genomic.gbff:NP_417313.1 '],
 'codon_start': ['1'],
 'transl_table': ['11'],
 'product': ['fused 2-acylglycerophospho-ethanolamine acyltransferase/acyl-acyl carrier protein synthetase'],
 'translation': ['MLFSFFRNLCRVLYRVRVTGDTQALKGERVLITPNHVSFIDGILLGLFLPVRPVFAVYTSISQQWYMRWLKSFIDFVPLDPTQPMAIKHLVRLVEQGRPVVIFPEGRITTTGSLMKIYDGAGFVAAKSGATVIPVRIEGAELTHFSRLKGLVKRRLFPQITLHILPPTQVAMPDAPRARDRRKIAGEMLHQIMMEARMAVRPRETLYESLLSAMYRFGAGKKCVEDVNFTPDSYRKLLTKTLFVGRILEKYSVEGERIGLMLPNAGISAAVIFGAIARRRMPAMMNYTAGVKGLTSAITAAEIKTIFTSRQFLDKGKLWHLPEQLTQVRWVYLEDLKADVTTADKVWIFAHLLMPRLAQVKQQPEEEALILFTSGSEGHPKGVVHSHKSILANVEQIKTIADFTTNDRFMSALPLFHSFGLTVGLFTPLLTGAEVFLYPSPLHYRIVPELVYDRSCTVLFGTSTFLGHYARFANPYDFYRLRYVVAGAEKLQESTKQLWQDKFGLRILEGYGVTECAPVVSINVPMAAKPGTVGRILPGMDARLLSVPGIEEGGRLQLKGPNIMNGYLRVEKPGVLEVPTAENVRGEMERGWYDTGDIVRFDEQGFVQIQGRAKRFAKIAGEMVSLEMVEQLALGVSPDKVHATAIKSDASKGEALVLFTTDNELTRDKLQQYAREHGVPELAVPRDIRYLKQMPLLGSGKPDFVTLKSWVDEAEQHDE']}

add db_xref, protein_id, gene_synonym to target
'''

geneTarget = {}
otherTarget = []
for fet in genomeTarget.features:
    try:
        name = fet.qualifiers['gene'][0]
        geneTarget[name] = fet
    except KeyError:
        try:
            name = fet.qualifiers['product'][0]
            geneTarget[name] = fet
        except KeyError:
            try:
                if fet.type == 'rep_origin':
                    name = fet.qualifiers['note'][0]
                    geneTarget[name] = fet
            except KeyError:
                otherTarget.append(fet)
geneRef = {}
otherRef = []
for fet in genomeRef.features:   
    try:
        name = fet.qualifiers['gene'][0]
        geneRef[name] = fet
    except KeyError:
        try:
            name = fet.qualifiers['product'][0]
            geneRef[name] = fet
        except KeyError:
            try:
                if fet.type == 'rep_origin':
                    name = fet.qualifiers['note'][0]
                    geneRef[name] = fet
            except KeyError:
                otherRef.append(fet)

        
# %%
uniqRef = []
for name in list(geneRef.keys()):
    if name not in geneTarget.keys():
        uniqRef.append(name)
print(f'Number of unique genes in Ref: {len(uniqRef)}')


uniqTarget = []
for name in list(geneTarget.keys()):
    if name not in geneRef.keys():
        uniqTarget.append(name)
print(f'Number of unique genes in Target: {len(uniqTarget)}')

# %%

seqRef = genomeRef.seq
seqTarget = genomeTarget.seq

# aligner = Align.PairwiseAligner()
# aligner.mode = 'local'
# %%
# alignments = aligner.align(seqTarget, genomeRef[geneRef['thrL'].location.start:geneRef['thrL'].location.end].seq)
from tqdm import tqdm

def blastseq(sequence: SeqRecord, subject):
    SeqIO.write(sequence, 'query.fasta', 'fasta')
    output = NcbiblastnCommandline(query="./query.fasta", subject=subject, outfmt=5)()[0]
    blast_result_record = NCBIXML.read(StringIO(output))
    return blast_result_record

def findMinindex(expectList, maxexpect=10)->list:
    EXCEPTS = maxexpect
    minim_indxes = []
    for i, excepts in enumerate(expectList):
        if excepts < EXCEPTS:
            minim_indxes = [i]
            EXCEPTS = excepts
        elif excepts == EXCEPTS:
            minim_indxes.append(i)
    return minim_indxes

def findIdenticals(hsplist, geneLength):
    identicalPctg = [hsp.identities/geneLength for hsp in hsplist]
    identical_index = []
    for i, pctg in enumerate(identicalPctg):
        if pctg == 1:
            identical_index.append(i)
    return identical_index


def getRank(loc):
    '''Return the loc rank
    '''
    rank = loc.copy()
    rank.sort()
    rank = [rank.index(i) for i in loc]
    return rank

blastret = {}
fa_target = r"./annotation_file/NCM3722_fulab_01/NCM3722.001.fna"
fa_ref = r'./annotation_file/GCF_000005845.2_ASM584v2_genomic.fa'
identicalGenesSeq = {}
identicalLocsinTarget = {}
identicalLocRankTarget = {}
identicalLocHSPTarget = {}
deletedGenelist = []
for geneName in tqdm(uniqRef):
    # geneName = 'insH10'
    geneSequence = genomeRef[geneRef[geneName].location.start:geneRef[geneName].location.end]
    if geneRef[geneName].strand == -1:
        geneSequence = geneSequence.reverse_complement()
    blast_result_record = blastseq(geneSequence, fa_target)
    
    geneLoc = (geneRef[geneName].location.start + geneRef[geneName].location.end) / 2
    try:
        align = blast_result_record.alignments[0]
        # for align in blast_result_record.alignments:
        # excpts_hsps = [hsp.expect for hsp in align.hsps]
        # minim_indxes = findMinindex(excpts_hsps)
        minim_indxes = findIdenticals(align.hsps, len(geneSequence.seq))
        idthspsTarget = [align.hsps[i] for i in minim_indxes]
        targetLoc = [(hsp.sbjct_start + hsp.sbjct_end)/2 for hsp in idthspsTarget]
        targetRank = targetLoc.copy()
        targetRank.sort()
        targetRank = [targetRank.index(i) for i in targetRank]
        
        # print(f'{geneName} Expect: {excpts_hsps}


        if len(minim_indxes) == 1:
            hsp = align.hsps[0]
            strand = hsp.strand
            start, end = hsp.sbjct_start, hsp.sbjct_end
            blastret[geneName] = dict(strand=strand, loaction=(start, end))
        elif len(minim_indxes) == 0:
            print(f'{geneName} was deleted in Target.')
            deletedGenelist.append(geneName)
        else:
            print(f'{geneName} find {len(minim_indxes)} duplication in Target')
            identicalLocHSPTarget[geneName] = idthspsTarget
            identicalGenesSeq[geneName] = geneSequence
            identicalLocsinTarget[geneName] = targetLoc
            identicalLocRankTarget[geneName] = targetRank
    except IndexError:
        print(f'{geneName} dosn\'t match in Reference.')
    
idetGeneName = list(identicalGenesSeq.keys())
idtcGeneTag = [None] * len(idetGeneName)

taginit = 0
for i, tag in enumerate(idtcGeneTag):
    if tag is None:
        compareName = idetGeneName[i]
        compareSeq = identicalGenesSeq[compareName]
        for j, name in enumerate(idetGeneName):
            seq = identicalGenesSeq[name]
            if seq.seq == compareSeq.seq:
                idtcGeneTag[j] = taginit
        taginit += 1
idtcGeneLoc = {}
classfiedGeneDict = {}
idtcGeneLocRank = {}     
for i in range(max(idtcGeneTag)+1):
    locus = []
    nameList = []
    for jindex, j in enumerate(idtcGeneTag):
        if j == i:
            nameList.append(idetGeneName[jindex])
            geneRecord = geneRef[idetGeneName[jindex]]
            locus.append((geneRecord.location.start + geneRecord.location.end)/2)
    idtcGeneLoc[i] = locus
    idtcGeneLocRank[i] = getRank(locus)
    classfiedGeneDict[i] = nameList
    
for i, geneName in enumerate(idetGeneName):
    geneTag = idtcGeneTag[i]
    genesList = classfiedGeneDict[geneTag]
    geneRank = idtcGeneLocRank[geneTag][genesList.index(geneName)]
    if geneRank <= max(identicalLocRankTarget[geneName]):
        geneindexTarget = identicalLocRankTarget[geneName].index(geneRank)
        hsp = identicalLocHSPTarget[geneName][geneindexTarget]
        strand = hsp.strand
        start, end = hsp.sbjct_start, hsp.sbjct_end
        blastret[geneName] = dict(strand=strand, loaction=(start, end))
    else:
        print(f'{geneName} was deleted in Target.')
                 
    
duplicategenes =['insB', 'insA', 'insI', 'insE', 'insF', 'insH', 'insL', 'insD', 'insC']


#%% update features in target

addkeys = ['db_xref', 'protein_id', 'gene_synonym']

unaddfeatures = {}
for name, fet in geneRef.items():
    
    try:
        # if gene have identical neame in target, add annotation
        fetinTarg = geneTarget[name]  # type: Bio.SeqFeature.SeqFeature
        if fetinTarg.type == 'CDS':
            for key in addkeys:
                fetinTarg.qualifiers[key] = fet.qualifiers[key]
        
    except KeyError:
        try:
            gene_lac = blastret[name]
            # print(f'add feature: {name}')
            fetNew = SeqFeature(**fet.__dict__)  # copy feature
            if gene_lac['strand'][0] != gene_lac['strand'][1]:
                if gene_lac['strand'][0] == 'Plus':  # Plus/ Minus
                    fetNew.location = FeatureLocation(gene_lac['loaction'][1]-1, gene_lac['loaction'][0], strand=-1)
                else:  # Minus / Plus
                    fetNew.location = FeatureLocation(gene_lac['loaction'][1]-1, gene_lac['loaction'][0], strand=1)
            else:  # + / +
                    fetNew.location = FeatureLocation(gene_lac['loaction'][0]-1, gene_lac['loaction'][1], strand=1)
                
            # check if the gene have been identified in Target
            inTarget = False
            for fetindex, fetTarget in enumerate(genomeTarget.features):
                if (fetTarget.location.start == fetNew.location.start) and (fetTarget.location.end == fetNew.location.end):
                    fetNew.qualifiers['locus_tag'] = fetTarget.qualifiers['locus_tag']
                    for key in fetNew.qualifiers.keys():
                        fetTarget.qualifiers[key] = fetNew.qualifiers[key]
                    inTarget = True    
            if inTarget == False:
                # print(fetNew.qualifiers)
                genomeTarget.features.append(fetNew)
            # print(len(genomeTarget.features))
        except KeyError:
            unaddfeatures[name] = fet


# newfets = geneRef['oriC']
# %%
SeqIO.write([genomeTarget], r'/root/RNA_seq_pip/annotation_file/NCM3722_fulab_01/NCM3722.002.gbk', 'genbank')
# %%
